procedure	! extract_aoi_chips

parm inc integer
parm long string
parm lat string
parm cls integer
parm ctrsl integer
parm ctrss integer
parm left_date 	! pre date
parm right_date ! post date
parm left string def="10JUL02063859-P1BS-052379674010_01_P001.img"	! halfword
parm right string def="10JUL05062946-P1BS-052379674030_01_P001.img"	! halfword

parm chippre  type=keyword valid=chippre  count=(0:1) default=--
parm chippost type=keyword valid=chippost count=(0:1) default=--
parm chipchg  type=keyword valid=chipchg  count=(0:1) default=--
parm chiptrp  type=keyword valid=chiptrp  count=(0:1) default=--

local target string init="target_bm.img"

local red string init=".nxred"
local grn string init=".nxgrn"
local blu string init=".nxblu"
local uu string init="_"
local tif string init=".tif"
local val1 real
local val2 real
local sl integer
local ss integer
local half integer init=128
local full integer
local mean real
local sigma real
local min integer
local max integer
local num integer
local found integer

local afidsvdevdata type=(string,99)

refgbl $echo
body

write "extract_aoi_chips version Sat May  7 2011"

let $echo="no"
let $switch=512
let full = half * 2

write "chippre  &chippre"
write "chippost &chippost"
write "chipchg  &chipchg"
write "chiptrp  &chiptrp"

translog AFIDS_VDEV_DATA afidsvdevdata
let target = "&afidsvdevdata/target_bm.img"

!	Make sure the first file is local ... 
write "checking &left"
file2tcl &left val=found
if (found=0) goto theend

write "inc &inc"
let sl = ctrsl - half
let ss = ctrss - half

!	Deal with the left image
gtcopy &left temp1 size=(&sl,&ss,&full,&full)
hist temp1 mean=mean sigma=sigma 'noh 'exclude
let min = $fix(mean-(2*sigma))
if (min<0) let min=0
let max = $fix(mean+(6*sigma))
cform temp1 temp2 iran=(&min,&max) oran=(0,255) 'byte
stretch temp2 lp 'gauss gsigma=2.5 iexclude=0

!	Copy out the center chip - rgb
gtcopy out&red rc size=(&sl,&ss,&full,&full)
gtcopy out&grn gc size=(&sl,&ss,&full,&full)
gtcopy out&blu bc size=(&sl,&ss,&full,&full)

!	Now deal with the right image
gtcopy &right temp1 size=(&sl,&ss,&full,&full)
hist temp1 mean=mean sigma=sigma 'noh 'exclude
let min = $fix(mean-(2*sigma))
if (min<0) let min=0
let max = $fix(mean+(6*sigma))
cform temp1 temp2 iran=(&min,&max) oran=(0,255) 'byte
stretch temp2 rp 'gauss gsigma=2.5 iexclude=0

!	Stuff the 3 images side by side
mss (lp,rc,rp) r
mss (lp,gc,rp) g
mss (lp,bc,rp) b

! we have ctrsl, ctrss
! get lon, lat from linesamplonlat.dat
! get dates, class from thumbdat (lat lon date1 date2 bv)

write "Center Line &ctrsl"
write "Center Samp &ctrss"

!	Make a blank working slate
gen mt1 nl=256 ns=768 ival=1 linc=0 sinc=0

!	Add all of the annotations
font mt1 mt2 position=(26,128,26,384,26,638,250,2,250,766) +
  dn=0 font=(3,3,3,3,3) wide=(0.75,0.75,0.75,0.75,0.75) +
  thick=(3,3,3,3,3) tall=(20,20,20,20,20) +
  text=("&left_date","Class: &cls","&right_date","Long &long","Lat &lat") +
  loc=(2,2,2,1,3)

!	Make a new mask that includes the annotations and the targets
f2 (mt2,&target) mask fun="in1*in2"

!	Apply the mask to the triplet RGB images
f2 (mask,r) rr fun="in1*in2"
f2 (mask,g) gg fun="in1*in2"
f2 (mask,b) bb fun="in1*in2"

!	Make the red overlay
stretch mask red table=(0,255,1,0) back=0

!	Add the red overlay to the R image
f2 (rr,red) rrr fun="in1+in2"

!	Add half the chip box size back so the filename will have the ls
  let sl = sl + half
  let ss = ss + half

write "checking for chips to generate"

if ("&chippre" = "chippre")
  !	Make a geoTif of the pre chip
  write "writing geoTif pre chip chipl_&inc&uu&sl&uu&ss&tif"
  vtiff3-fromv lp chipl_&inc&uu&sl&uu&ss&tif 'lzw
end-if

if ("&chippost" = "chippost")
  !	Make a geoTif of the pre chip
  write "writing geoTif post chip chipr_&inc&uu&sl&uu&ss&tif"
  vtiff3-fromv rp chipr_&inc&uu&sl&uu&ss&tif 'lzw
end-if

if ("&chiptrp" = "chiptrp")
  !	Make an rgb tif file
  write "writing tiff triplet_&inc&uu&sl&uu&ss&tif"
  vtiff3-fromv (rrr,gg,bb) triplet_&inc&uu&sl&uu&ss&tif 'lzw
end-if

if ("&chipchg" = "chipchg")
  !	Make a geoTif of the rgb chip
  write "writing geoTif change chip chip_&inc&uu&sl&uu&ss&tif"
  vtiff3-fromv (rc,gc,bc) chip_&inc&uu&sl&uu&ss&tif 'lzw
end-if

theend>
end-proc
