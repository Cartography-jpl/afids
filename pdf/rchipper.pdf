! VICAR Proc: rchipper.pdf version-1 18MAR05
! Purpose:    Extract sub-images of constant nl/ns size
!             out of a single larger image, with an overlap between tiles. 
!             Target coordinates are randomly calculated. The number of
!             output Chips is calculated as a percentage of the total number
!             of chips possible (for the given input image size), or from
!             the number of User requested chips. If both a percent and
!             and number are supplied by the User, the entered "number"
!             will be used.
!
! NOTE:       It is possible to get more than the expected Number of Chips
!             when a given point occurs in the overlap area.             
!
! NOTE:       Calculation of the Maximum number of chips is an approximation
!     
! NOTE:       Tile size can be varied in the lines (Y) and samples (X)
!             directions, but the overlap 'number of pixels' is the same
!             for both.
!
procedure
parm     inname    string   !dir and full filename of input vicar gt image 
parm     outname   string   !Output filename; "_&K_&M.tif" will be appended
parm     elev      string   !Input elevation DEM file covering input image
parm     percimg   integer  def=0   !Percent of image's theoretical total # of chips
parm     seed      integer  def=0   !If not 0, overwrights the Random Seed calculation 
parm     numchip   integer  def=0   !Max number of chips to be generated
parm     sl        integer  def=1   !start line of "single input" for subsetting
parm     ss        integer  def=1   !start sample of "single input" for subsetting
parm     nl        integer  def=0   !num of lines in input picture
parm     ns        integer  def=0   !num of samps in input picture
parm     outl      integer  def=1024  !num of output lines
parm     outs      integer  def=1024  !num of output samps
parm     olap      integer  def=128 !amount of overlap for both lines and samples
parm     tsamp     integer  def=0   !target sample (target mode); X
parm     tline     integer  def=0   !target line (target mode); Y
local    tchps     integer  !Total number of chips possible
local    reqchps   integer  !Number of requested chips
local    center_l  integer  !Center of image Line-Coordinate
local    center_s  integer  !Center of image Samp-Coordiante
local    inc       integer  !Increment
local    found     integer  !1=found; 0=not found
local    K         integer  !chip's upper left Line coordinate
local    M         integer  !chip's upper left Samp coordinate
local    ival      integer  !variable
local    format    string   !byte or half
local    val       real    
local    val1      real
local    val2      real
local    ival1     integer
local    ival2     integer

body

!Get image nl ns dimensions
if ((sl > 1 or ss > 1) and (nl < 1 or ns < 1))
    form &"inname" format nl ns
    let nl = (nl - sl) + 1
    let ns = (ns - ss) + 1
else
    if (nl < 1 or ns < 1)  form &"inname" format nl ns
end-if

!Calculate the theoretical maximum number of chips
let       ival1 = (&nl+&outl)/(&outl-&olap) 
let       ival2 = (&ns+&outs)/(&outs-&olap)
let       val   = $float(ival1 * ival2)
let       tchps = $fix(&val+.5)
write     "The Maximum Number of Possible Tiles is: &tchps ********"

!Calculate the Number of requested chips
if       (percimg <> 0 and numchip = 0) 
   let    val1 = $float(&percimg)
   let    val2 = (val1/100)
   let    val1 = $float(&tchps)
   let    val = (val1 * val2)
   let    reqchps = $fix(&val+.5)
else-if  (percimg = 0 and numchip <> 0)
   let    reqchps = numchip
else-if  (percimg <> 0 and numchip <> 0)
   let    reqchps = numchip     
end-if

if       (reqchps > tchps) let reqchps = tchps
write    "The number of Chips to be Generated is: &reqchps ********"

!Generate a unique seed number for the random number generator based
! on the average DNs around the center of the image

if       (seed <> 0) goto next1
let       val = $float(&nl)/2.0
let       center_l = $fix(&val+.5)
let       val = $float(&ns)/2.0
let       center_s = $fix(&val+.5)

ibis-gen  xxr.int nr=1 nc=4 datacol=(1,2,3,4) +
          data=(&center_l,&center_s,0,0)
ibis-l    xxr.int

!Use the average DN ofthe center 25x25 region as the random number
!seed generator.
getzval  (&"inname",xxr.int) window=25
ibis2tcl  xxr.int val ibisloc=(1,3) vartype=0 varcnt=1
let       seed = $fix(&val)
next1>
ibis-gen  xxr.int nr=&tchps nc=2

!Generate random line/sample centroids for chip creation
mf3       xxr.int func="c1=@rand*&nl" seed=&seed
mf3       xxr.int func="c2=@rand*&ns" seed=&seed
mf3       xxr.int func="c1=@aint(c1)"
mf3       xxr.int func="c2=@aint(c2)"

!Generate Random Chips
!Loop through tchps times and create randowm chips
let       inc = 0

loop
   let    inc = inc + 1
   write "inc = &inc"
   if    (inc > reqchps) break
   write "inc = &inc"
   ibis2tcl xxr.int val1 val2 ibisloc=(&inc,1,&inc,2) +
          vartype=(0,0) varcnt=2
   let    center_l = $fix(&val1+.5)
   let    center_s = $fix(&val2+.5)
!Check to see if the tile already exists...if so, skip it
   let    K = ((center_l/(outl-olap))*(outl-olap))+1  !chip starting yline
   let    M = ((center_s/(outs-olap))*(outs-olap))+1  !chip starting xsamp
   file2tcl &"outname"_&"K"_&"M".tif val=found
   if (found=1)
       write "Chip &"outname"_&"K"_&"M".tif already exists .... skipping"
       goto next2
   else
       write "Making Chip &"outname"_&"K"_&"M".tif"
   end-if

   chipper &inname,&outname,&elev,&sl,&ss,&nl,&ns,&outl,&outs, +
           &olap,&center_s,&center_l
   next2>
end-loop
ush rm xxr.int

write "MSG: PROCESSING COMPLETED"

end-proc