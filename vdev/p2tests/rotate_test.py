# This duplicates the tests done in tstrotate. This is an example of how
# to write these tests using python, and in particular to have the test
# do it's own evaluation of if it succeeds or not.
#
# The tstrotate just spits out the contents of the file it generates.
# Did the test succeed? Or did it fail?
#
# For python, we run the same test but then we evaluate the output to
# determine if it is ok or not. 

from nose.tools import *
from afids import *

def test_rotate_min45():
    '''Test to rotate by -45 degrees such that shading should appear in
    the sample direction only.'''
    res = vicar_to_numpy('''
gen A NL=15 NS=15 IVAL=90
rotate A out ANGLE=-45. IDSNAM=IDS.DAT IDSNS=1000
''')
    # This is the expected results. We ran the test and inspected that
    # the results looked good.
    expected = \
[[  0,   0,   0,   0,   0, 101, 103, 104, 105, 107,   0,   0,   0,   0,   0],
 [  0,   0,   0,   0, 100, 101, 103, 104, 105, 107, 108,   0,   0,   0,   0],
 [  0,   0,   0,  98, 100, 101, 103, 104, 105, 107, 108, 110,   0,   0,   0],
 [  0,   0,  97,  98, 100, 101, 103, 104, 105, 107, 108, 110, 111,   0,   0],
 [  0,  96,  97,  98, 100, 101, 103, 104, 105, 107, 108, 110, 111, 112,   0],
 [ 94,  96,  97,  98, 100, 101, 103, 104, 105, 107, 108, 110, 111, 112, 114],
 [ 94,  96,  97,  98, 100, 101, 103, 104, 105, 107, 108, 110, 111, 112, 114],
 [ 94,  96,  97,  98, 100, 101, 103, 104, 105, 107, 108, 110, 111, 112, 114],
 [ 94,  96,  97,  98, 100, 101, 103, 104, 105, 107, 108, 110, 111, 112, 114],
 [ 94,  96,  97,  98, 100, 101, 103, 104, 105, 107, 108, 110, 111, 112, 114],
 [  0,  96,  97,  98, 100, 101, 103, 104, 105, 107, 108, 110, 111, 112,   0],
 [  0,   0,  97,  98, 100, 101, 103, 104, 105, 107, 108, 110, 111,   0,   0],
 [  0,   0,   0,  98, 100, 101, 103, 104, 105, 107, 108, 110,   0,   0,   0],
 [  0,   0,   0,   0, 100, 101, 103, 104, 105, 107, 108,   0,   0,   0,   0],
 [  0,   0,   0,   0,   0, 101, 103, 104, 105, 107,   0,   0,   0,   0,   0]]
    # We allow at the most 1 pixel difference
    assert abs(res - expected).max() <=1


def test_rotate_shift_and_nointerp():
    '''Test shift of the output center of rotation and use of nointerp'''
    res = vicar_to_numpy('''
gen A NL=15 NS=15 IVAL=90
rotate A out ANGLE=-45. 'NOIN CENTER=(8,4)
''')
    # This is the expected results. We ran the test and inspected that
    # the results looked good.
    expected = \
[[100, 102, 102, 104, 106, 106, 108,   0,   0,   0,   0,   0,   0,   0,   0],
 [100, 101, 103, 104, 105, 107, 108, 110,   0,   0,   0,   0,   0,   0,   0],
 [ 99, 101, 103, 104, 105, 107, 109, 109, 111,   0,   0,   0,   0,   0,   0],
 [100, 101, 102, 104, 106, 107, 108, 110, 111, 112,   0,   0,   0,   0,   0],
 [100, 101, 102, 104, 106, 107, 108, 110, 111, 112, 114,   0,   0,   0,   0],
 [ 99, 101, 103, 104, 105, 107, 109, 109, 111, 113, 114, 115,   0,   0,   0],
 [100, 101, 103, 104, 105, 107, 108, 110, 111, 113, 114, 115, 117,   0,   0],
 [100, 102, 102, 104, 106, 106, 108, 110, 112, 112, 114, 116, 116, 118,   0],
 [100, 101, 103, 104, 105, 107, 108, 110, 111, 113, 114, 115, 117,   0,   0],
 [ 99, 101, 103, 104, 105, 107, 109, 109, 111, 113, 114, 115,   0,   0,   0],
 [100, 101, 102, 104, 106, 107, 108, 110, 111, 112, 114,   0,   0,   0,   0],
 [100, 101, 102, 104, 106, 107, 108, 110, 111, 112,   0,   0,   0,   0,   0],
 [ 99, 101, 103, 104, 105, 107, 109, 109, 111,   0,   0,   0,   0,   0,   0],
 [100, 101, 103, 104, 105, 107, 108, 110,   0,   0,   0,   0,   0,   0,   0],
 [100, 102, 102, 104, 106, 106, 108,   0,   0,   0,   0,   0,   0,   0,   0]]
    # We allow at the most 1 pixel difference
    assert abs(res - expected).max() <=1

def test_rotate_shift_and_nointerp_half():
    '''Test rotate about (10,6) and end up at (3,3) and in halfword'''
    res = vicar_to_numpy('''
gen A NL=15 NS=16 IVAL=90 'HALF
rotate A out ANGLE=-45. LINE=10 SAMP=6 CENTER=(3,3)
''')
    # This is the expected results. We ran the test and inspected that
    # the results looked good.
    expected = \
[[101, 103, 104, 105, 107, 108, 110, 111, 112, 114, 115, 117,   0,   0,   0 ,  0],
 [101, 103, 104, 105, 107, 108, 110, 111, 112, 114, 115,   0,   0,   0,   0 ,  0],
 [101, 103, 104, 105, 107, 108, 110, 111, 112, 114,   0,   0,   0,   0,   0 ,  0],
 [101, 103, 104, 105, 107, 108, 110, 111, 112,   0,   0,   0,   0,   0,   0 ,  0],
 [101, 103, 104, 105, 107, 108, 110, 111,   0,   0,   0,   0,   0,   0,   0 ,  0],
 [101, 103, 104, 105, 107, 108, 110,   0,   0,   0,   0,   0,   0,   0,   0 ,  0],
 [101, 103, 104, 105, 107, 108,   0,   0,   0,   0,   0,   0,   0,   0,   0 ,  0],
 [101, 103, 104, 105, 107,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0 ,  0],
 [  0, 103, 104, 105,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0 ,  0],
 [  0,   0, 104,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0 ,  0],
 [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0 ,  0],
 [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0 ,  0],
 [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0 ,  0],
 [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0 ,  0],
 [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0 ,  0]]
    # We allow at the most 1 pixel difference
    assert abs(res - expected).max() <=1

def test_rotate_lgeom():
    '''Test rotate where lgeom is called'''
    res = vicar_to_numpy('''
gen A NL=15 NS=16 IVAL=90 'HALF
rotate A out ANGLE=-85
''')
    # This is the expected results. We ran the test and inspected that
    # the results looked good.
    expected = \
[[  0,   0, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117,   0,   0],
 [  0, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118],
 [  0, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116,   0],
 [  0, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115,   0],
 [  0, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114,   0],
 [  0,  99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113,   0],
 [  0,  98,  99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,   0],
 [  0,  97,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112,   0],
 [  0,  97,  98,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111,   0],
 [  0,  96,  97,  98,  99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110,   0],
 [  0,  95,  96,  97,  98,  99, 100, 101, 102, 103, 104, 106, 107, 108, 109,   0],
 [  0,  94,  95,  96,  97,  98,  99, 100, 101, 102, 104, 105, 106, 107, 108,   0],
 [  0,  93,  94,  95,  96,  97,  98,  99, 100, 102, 103, 104, 105, 106, 107,   0],
 [ 91,  92,  93,  94,  95,  96,  97,  99, 100, 101, 102, 103, 104, 105, 106,   0],
 [  0,   0,  92,  93,  94,  95,  97,  98,  99, 100, 101, 102, 103, 104,   0,   0]]
    # We allow at the most 1 pixel difference
    assert abs(res - expected).max() <=1




