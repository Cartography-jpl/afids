procedure help=*
parm key type=string
parm band type=string

local xyfile type=(string,99)
local nfile type=(string,99)
local t1file type=(string,99)
local t2file type=(string,99)
local t3file type=(string,99)
local parfile type=(string,99)
local pathxy type=(string,99)
local finaldir type=(string,99)
local inlname type=(string,99)
local bobname type=(string,99)
local edname type=(string,99)
local rawfile type=(string,99)
local infile type=(string,99)
local outfile type=(string,99)
local reffile type=(string,99)
local refmap type=(string,99)
local gridfinal type=(string,99)
local Bgrid type=(string,99)
local xxxfinalref type=(string,99)
local xxxtinp type=(string,99)
local xxe type=(string,99)
local primaryfile type=(string,99)
local primarygrid type=(string,99)
local pgrid1 type=(string,99)
local pgrid2 type=(string,99)
local pgrid3 type=(string,99)

local numimg int
local sl int
local ss int
local nl int
local ns int
local nl2 int
local ns2 int
local iloop int
local numpoints int
local nah int
local nav int
local nahp1 int
local navp1 int
local nahxnav int
local gclen int
local qexist int

local rslv real
local rssv real
local rnlv real
local rnsv real
local slv int
local ssv int
local nlv int
local nsv int
local btype string

refgbl $echo
body
let $echo="yes"

if ("&band"="1" or "&band"="2" or "&band"="3N")
   let btype = "VNIR"
else
   let btype = "SWIR"
end-if

!  XY CORRECTION FOR ASTER

let xyfile = "&key" // "_&band" // "_xyfile"
let nfile = "&key" // "_&band" // "_nfile"
let t1file = "scratch/&key" // "&band" // "t1file"
let t2file = "scratch/&key" // "&band" // "t2file"
let t3file = "scratch/&key" // "&band" // "t3file"
let xxxtinp = "scratch/&key" // "&band" // "xxxtinp"
let xxe = "scratch/&key" // "&band" // "xxe"

let parfile = "&key" // "_params"
asc2tcl &parfile keyword="pathxy=" val=pathxy vtype=0
asc2tcl &parfile keyword="refmap=" val=refmap vtype=0
asc2tcl &parfile keyword="numimg=" val=numimg vtype=4
asc2tcl &parfile keyword="nah=" val=nah vtype=4
asc2tcl &parfile keyword="nav=" val=nav vtype=4

! loop over images

let iloop = 0
loop
   let iloop = iloop+1
   if (iloop>numimg) goto iloopdone
   let finaldir = "&pathxy" // "/"
   ibis2tcl &nfile v1=inlname vartype=2 ibisloc=(&iloop,1)
   let infile = "&finaldir" // "&inlname" // "VNIR_map4.2"
   plab2tcl inp=&infile property="COREG_META_DATA" val=bobname +
       keyword=bobdate vtype=0
   let outfile = "&finaldir" // "&bobname" // "&btype" // "_map5.&band"
   let primarygrid = "&finaldir" // "&bobname" // "gridfinal"
   let pgrid1 = "&primarygrid" // "1"
   let pgrid2 = "&primarygrid" // "2"
   let pgrid3 = "&primarygrid" // "3"
   let gridfinal = "&finaldir" // "&bobname" // "Bgridfinal"
   let reffile = "&finaldir" // "&bobname" // "gridfinal3"
   write "iloop &iloop inlname &inlname bobname &bobname x"
   write "primarygrid &primarygrid gridfinal &gridfinal"
   write "should do fit and throwout here"
  
   let rawfile = "&finaldir" // "&bobname" // "&btype" // "_map0.&band"
   write "rawfile &rawfile"
   write "infile &infile"
   write "outfile &outfile"
   write "reffile &reffile"
   
   if ("&band"<>"2")
      let Bgrid = "&finaldir" // "&bobname" // "Bgridfinal"
      let pgrid1 = "&Bgrid" // "1"
      let pgrid2 = "&Bgrid" // "2"
      let pgrid3 = "&Bgrid" // "3"
      ibis2tcl &pgrid2 v1=rslv v2=rssv v3=rnlv v4=rnsv +
         vartype=(-1,-1,-1,-1) ibisloc=(1,1,1,2,1,3,1,4)
      let slv = $fix(rslv)
      let ssv = $fix(rssv)
      let nlv = $fix(rnlv)
      let nsv = $fix(rnsv)
      write "slv ssv nlv nsv &slv &ssv &nlv &nsv"
      
      write "pgrid3 &pgrid3"
      geomv (&rawfile, +
         &pgrid1, +
         &pgrid3) +
         out=&outfile +
         size=(&slv,&ssv,&nlv,&nsv)
      goto continueloop
   end-if
   
   ibis-l &xyfile nr=2
   rowop2 &xyfile &t1file key=25 range=(&iloop,&iloop) prec=0.5 'select
   ibis-copy &t1file &t2file
   mf3 &t2file f="c26=@index"
   rowop2 &t2file &t3file key=26 range=(1,1) prec=0.5 'select
   lab2tcl &infile v1=nl v2=ns keyword=(nl,ns) 'system
   let nl2 = nl/2
   let ns2 = ns/2
   mf3 &t3file f="c6=(&nl2)$c7=(&ns2)$c1=(&nl2)$c2=(&ns2)"
   icat (&t3file,&t1file) &t2file 'v
   
   write "&nl &ns &nl2 &ns2"
   ibis2tcl &t2file vclen=numpoints vartype=1
   write "numpoints &numpoints"
   if (numpoints>1490)
      mf3 &t2file f="c33=@rand*(&numpoints)/1490"
      rowop2 &t2file &t1file key=33 range=(0.0,0.9) 'select
      write "points reduced for pwl fit"
      ! should increase tieconv gridcheck to 3000, but keep this for huge overlap
   else
      ibis-copy &t2file &t1file
   end-if
   
   !  the distortion files are remapped if non-pc mapping output

   file2tcl &refmap val=qexist
   if (qexist=0)
      let xxxfinalref = "&reffile"
   else
      let xxxfinalref = "&refmap"
   
      ibis-gen &xxxtinp nc=4 nr=1 format=(DOUB,DOUB,DOUB,DOUB)
      icat (&pgrid1,&xxxtinp) &xxe 'h
      
      pixmap (&xxe,&pgrid3) mapcol=(5,6) pixcol=(1,2) 'pixtomap
      gtproj (&xxe,&pgrid3,&xxxfinalref) incol=(5,6) outcol=(7,8) 'tec
      pixmap (&xxe,&xxxfinalref) mapcol=(7,8) pixcol=(1,2) 'maptopix
      
      pixmap (&xxe,&rawfile) mapcol=(5,6) pixcol=(3,4) 'pixtomap
      gtproj (&xxe,&rawfile,&xxxfinalref) incol=(5,6) outcol=(7,8) 'tec
      pixmap (&xxe,&xxxfinalref) mapcol=(7,8) pixcol=(3,4) 'maptopix
   end-if
   
   ! both columns have been mapped to the infile (see zprocess)

   pixmap (&t1file,&infile) mapcol=(33,34) pixcol=(1,2) 'pixtomap
   gtproj (&t1file,&infile,&xxxfinalref) incol=(33,34) outcol=(35,36) 'tec
   ibis-l &t1file nr=4 'format
   pixmap (&t1file,&xxxfinalref) mapcol=(35,36) pixcol=(3,4) 'maptopix

   pixmap (&t1file,&infile) mapcol=(33,34) pixcol=(6,7) 'pixtomap
   gtproj (&t1file,&infile,&xxxfinalref) incol=(33,34) outcol=(35,36) 'tec
   pixmap (&t1file,&xxxfinalref) mapcol=(35,36) pixcol=(1,2) 'maptopix
   
   if (qexist=0)
      gtwarpxd &rawfile +
        &outfile +
        ref=&xxxfinalref +
        distort=(&primarygrid,&t1file,,,) +
        dcols=(0,0,0,0,1,2,3,4) gridout=&gridfinal znoin=znoin +
        polyfit=("","","","","") 'coverinp nah=&nah nav=&nav
   else
      gtwarpxd &rawfile +
        &outfile +
        ref=&xxxfinalref +
        distort=(&xxe,&t1file,,,) +
        dcols=(1,2,3,4,1,2,3,4) gridout=&gridfinal znoin=znoin +
        polyfit=("","","","","")'coverinp nah=&nah nav=&nav
   end-if
continueloop>
end-loop
iloopdone>
  
theend>
end-proc
.TITLE
XYCORR_A - correct (x,y) for aster mosaicking
.HELP
PURPOSE
     
     
CALL

  
  
OPERATION


PERFORMANCE


.PAGE

Restrictions
------------

You must use the IBIS file prepared by zprocess.pdf


.PAGE
Original Programmer: A. L. Zobrist, 21 Jan, 2004
Current Cognizant Programmer: A. L. Zobrist

 
.level1

.END
