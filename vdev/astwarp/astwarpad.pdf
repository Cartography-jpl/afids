procedure help=*
parm key type=string
parm fname type=string
parm l2name type=string default=""
parm btype type=string valid=("","VNIR","SWIR","TIR","L2-5","L2-8","L2-9")
parm band type=string default=""
parm maptype type=string valid=("pc","utm") default="pc"

local rawl1r type=string
local rawacs type=string
local rawkey type=string
local rawroot type=string

local inloc type=string
local rawfile type=string
local imgfile type=string
local txtfile type=string
local tempfile1 type=string
local tempfile2 type=string
local tempfile3 type=string
local gridfinal1 type=string
local gridfinal2 type=string
local gridfinal3 type=string
local gridinfo type=string
local masterfile type=string
local outfile type=string
local raw3Nfile type=string
local dtype type=string
local gridalt type=string
local gridalt2 type=string
local gridalt3 type=string
local corfail type=string

local rsl real
local rss real
local rnl real
local rns real
local sl int
local ss int
local nl int
local ns int

local found3N int
local btypecf int

local rslv real
local rssv real
local rnlv real
local rnsv real
local slv int
local ssv int
local nlv int
local nsv int

local t1l real
local t1s real
local t2l real
local t2s real
local t3l real
local t3s real
local t1e real
local t1n real
local t2e real
local t2n real
local t3e real
local t3n real

local l1 real
local s1 real
local l2 real
local s2 real
local l3 real
local s3 real
local l4 real
local s4 real
local il1 int
local is2 int
local is3 int
local il4 int

local tnl int
local tns int

refgbl $echo

body

let $echo="yes"

! other filenames

if (btype="L2-5")
   let rawroot = "raw&key" // "/&l2name"
   let imgfile = "&rawroot" // "_SE-05" // "_&band" // ".img"
   let outfile = "final&key" // "/&l2name" // "&btype" // "_map4.&band"
else-if (btype="L2-8")
   let rawroot = "raw&key" // "/&l2name"
   let imgfile = "&rawroot" // "_SKT-08" // ".img"
   let outfile = "final&key" // "/&l2name" // "&btype" // "_map4"
else-if (btype="L2-9")
   let rawroot = "raw&key" // "/&l2name"
   let imgfile = "&rawroot" // "_SRTIR-09T" // "_&band" // ".img"
   let outfile = "final&key" // "/&l2name" // "&btype" // "_map4.&band"
else
   let rawroot = "raw&key" // "/&fname" // "&btype"
   let imgfile = "&rawroot" // "_&band" // ".img"
   let outfile = "final&key" // "/&fname" // "&btype" // "_map4.&band"
end-if

let tempfile1 = "scratch/" // "xxx&key" // "temp1" // ".img"
let tempfile2 = "scratch/" // "xxx&key" // "temp2" // ".img"
let tempfile3 = "scratch/" // "xxx&key" // "temp3" // ".img"
let gridfinal1 = "final&key" // "/&fname"  // "gridfinal1"
let gridfinal2 = "final&key" // "/&fname"  // "gridfinal2"
let gridfinal3 = "final&key" // "/&fname"  // "gridfinal3"
let gridinfo = "final&key" // "/&fname"  // "gridinfo"
let txtfile = "raw&key" // "/&fname" // "VNIR_VNIR.txt"
let gridalt = "scratch/" // "xxx&key" // "temp4" // ".grid"
let gridalt2 = "scratch/" // "xxx&key" // "temp4" // ".grid2"
let gridalt3 = "scratch/" // "xxx&key" // "temp4" // ".grid3"
let raw3Nfile = "raw&key" // "/&fname" // "VNIR_3N.img"

if (maptype="pc")
   let masterfile = "final&key" // "/&key" // "master.img"
else
   let masterfile = "final&key" // "/&key" // "master.img" // "u"
end-if

! call of logger

let inloc = "raw" // "&key" // "/"
let rawfile = "&inloc" // "&fname" // ".raw"
if (l2name<>"") let rawfile = "&inloc" // "&l2name" // ".raw"

if (btype="L2-5" or btype="L2-8" or btype="L2-9")
   write "first call"
   asterlog inp=&rawfile out=&rawroot lookback=0
else
   write "second call"
   asterlog inp=&rawfile out=&rawroot sensor=&btype lookback=0
end-if

! get the parameters from the gridinfo file

ibis2tcl &gridinfo v1=t1l v2=t1s v3=t1e v4=t1n +
    v5=t2l v6=t2s v7=t2e v8=t2n +
    v9=t3l v10=t3s v11=t3e v12=t3n +
    vartype=(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1) +
    ibisloc=(1,1,1,2,1,3,1,4, +
             2,1,2,2,2,3,2,4, +
             3,1,3,2,3,3,3,4)
ibis2tcl &gridinfo v1=rsl v2=rss v3=rnl v4=rns +
   vartype=(0,0,0,0) ibisloc=(1,7,1,8,1,9,1,10)
let sl = $fix(rsl)
let ss = $fix(rss)
let nl = $fix(rnl)
let ns = $fix(rns)
write "sl ss nl ns &sl &ss &nl &ns"

! the sl,ss,nl,ns for geom is different

ibis2tcl &gridfinal2 v1=rslv v2=rssv v3=rnlv v4=rnsv +
   vartype=(-1,-1,-1,-1) ibisloc=(1,1,1,2,1,3,1,4)
let slv = $fix(rslv)
let ssv = $fix(rssv)
let nlv = $fix(rnlv)
let nsv = $fix(rnsv)
write "slv ssv nlv nsv &slv &ssv &nlv &nsv"

! shortened processing extracted from hywarp.pdf

asc2tcl &txtfile keyword="ASTER_PRODUCT_TYPE=" val=dtype +
     btrim=1 etrim=1 vtype=0
if (btype="SWIR")
   let btypecf = 2000
else-if (btype="TIR")
   let btypecf = 6000
end-if

if (btype="L2-5" or btype="L2-8" or btype="L2-9")
   gtsize &imgfile &tempfile1 'ignoregt pzoom=6.0
else-if (btype="VNIR" or btype="")
   copy &imgfile &tempfile1
else-if (dtype="1A")
   imcorner &imgfile line1=l1 samp1=s1 line2=l2 samp2=s2 +
      line3=l3 samp3=s3 line4=l4 samp4=s4 inside=130
   gengrid2 out=&gridalt ncol=18 nah=9 nav=9 +
      l1=&l1 s1=&s1 l2=&l2 s2=&s2 l3=&l3 s3=&s3 l4=&l4 s4=&s4
   
   mf3 &gridalt f="c11=@rand"
   sort &gridalt sortcol=11
   picmtch5 (&imgfile,&raw3Nfile,&gridalt) SEARCH=256  fftsize=256 +
      minsrch=256 zrej=256 pred=linear autofit=12 redo=12 +
      zerolim=12 ffthalf=0 +
      itie=(1,1,1,1000,1000,1) otie=(1,1,1,&btypecf,&btypecf,1)
   
   rowop2     &gridalt &gridalt2 keycol=9 range=(-10000.0,0.0) 'delete 
   mf3        &gridalt2 func="c12=1.0$c16=c1*c1$c17=c1*c2$c18=c2*c2"

   ibislsq2 &gridalt2 indcol=(1,2,12,16,17,18)  depcol=6 rescol=13
   ibislsq2 &gridalt2 indcol=(1,2,12,16,17,18)  depcol=7 rescol=14
   mf3       &gridalt2 func="c15=@sqrt(c13*c13+c14*c14)"
   rowop2    &gridalt2 &gridalt keycol=15 range=(0.0,15.0) 'select
   
   ibislsq2 &gridalt indcol=(1,2,12,16,17,18)  depcol=6 rescol=13
   ibislsq2 &gridalt indcol=(1,2,12,16,17,18)  depcol=7 rescol=14
   mf3        &gridalt func="c15=@sqrt(c13*c13+c14*c14)"
   rowop2     &gridalt &gridalt2 keycol=15 range=(0.0,6.0) 'select
   
   ibislsq2 &gridalt2 indcol=(1,2,12,16,17,18)  depcol=6 rescol=13
   ibislsq2 &gridalt2 indcol=(1,2,12,16,17,18)  depcol=7 rescol=14
   mf3        &gridalt2 func="c15=@sqrt(c13*c13+c14*c14)"
   rowop2     &gridalt2 &gridalt keycol=15 range=(0.0,3.0) 'select
   
   
   lab2tcl &raw3Nfile v1=tnl v2=tns keyword=(nl,ns) 'system
   tieconv &gridalt &gridalt2 cols=(6,7,1,2) +
      nah=100 nav=100 poly="QUAD" 'geomv +
      minl=0 mins=0 maxl=&tnl maxs=&tns
   geomv inp=(&imgfile,&gridalt2) out=&tempfile1 nl=&tnl ns=&tns
   ! try to achieve single resample later for this case,
   ! use gridcomp or gtwarpxd
else-if (btype="SWIR")
   gtsize &imgfile &tempfile1 'ignoregt pzoom=2.0
else-if (btype="TIR")
   gtsize &imgfile &tempfile1 'ignoregt pzoom=6.0
end-if
gtgen inp=&tempfile1 'tiecnvrt +
   geotiff=("ModelTiePointTag=(&t1s,&t1l,0,&t1e,&t1n,0.0)", +
  "ModelTiePointTag=(&t2s,&t2l,0,&t2e,&t2n,0.0)", +
  "ModelTiePointTag=(&t3s,&t3l,0,&t3e,&t3n,0.0)", +
  "GTModelTypeGeoKey=2(ModelTypeGeographic)", +
  "GTRasterTypeGeoKey=2(RasterPixelIsPoint)", +
  "GeogEllipsoidGeoKey=7030(Ellipse_WGS84)")
gtcopy &tempfile1 &tempfile2 size=(&sl,&ss,&nl,&ns)


geomv inp=(&tempfile2,&gridfinal1,&gridfinal3) +
      out=&tempfile3 size=(&slv,&ssv,&nlv,&nsv)
gtsize (&tempfile3,&masterfile) &outfile 'coverref


theend>
end-proc
.TITLE
astwarpad - warp one additional band of aster
.HELP
PURPOSE
     
	   
CALL
  
  
OPERATION


PERFORMANCE

Restrictions
------------


Original Programmer: A. L. Zobrist, 29 Nov, 2001
Current Cognizant Programmer: A. L. Zobrist
Last change by: A. L. Zobrist, 27 Feb, 2003

.LEVEL1
.vari key
the key chosen for the 
initial runs
.vari fname
the root filename
.vari band
the band number
.vari maptype
"pc"  - output to Platte Caree
"utm" - output to UTM
.END
