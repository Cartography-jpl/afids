procedure

parm subdir type=string default="10MAY21_10MAY19"
parm preroot type=string default="data/may21"
parm postroot type=string default="data/may19"
parm outtabroot type=string default="objects"
parm minsize int default=3
parm maxsize int default=40

local nxpre1 string
local nxpre2 string
local nxpre3 string
local nxpre4 string
local nxpre5 string
local nxpre6 string
local nxpre7 string
local nxpre8 string
local nxpost1 string
local nxpost2 string
local nxpost3 string
local nxpost4 string
local nxpost5 string
local nxpost6 string
local nxpost7 string
local nxpost8 string

local pre10 string
local pre20 string
local pre30 string
local pre40 string
local pre50 string
local pre60 string
local pre70 string
local pre80 string
local post10 string
local post20 string
local post30 string
local post40 string
local post50 string
local post60 string
local post70 string
local post80 string

local dif1 string
local dif2 string
local dif3 string
local dif4 string
local dif5 string
local dif6 string
local dif7 string
local dif8 string
local nxpre3byte string
local nxpost3byte string
local nxred string
local nxgrn string
local nxblu string
local xxxim4 string
local xxxim4a string
local xxxim4b string
local xxxim4c string
local xxxim4bb string
local xxxim4cc string
local xxxim4d string
local xxxim4e string
local xxxim4f string
local xxxim5 string
local xxxim6 string
local outibis string
local outimg string


refgbl $echo
refgbl $autousage
refgbl $syschar

body

let $autousage = "none"
let _onfail="return"
let $echo="yes"

write "detwv4 Wed 30 2010"

let pre10 = "&preroot" // "_b1.img"
let pre20 = "&preroot" // "_b2.img"
let pre30 = "&preroot" // "_b3.img"
let pre40 = "&preroot" // "_b4.img"
let pre50 = "&preroot" // "_b5.img"
let pre60 = "&preroot" // "_b6.img"
let pre70 = "&preroot" // "_b7.img"
let pre80 = "&preroot" // "_b8.img"
let post10= "&postroot" // "_b1.img"
let post20= "&postroot" // "_b2.img"
let post30= "&postroot" // "_b3.img"
let post40= "&postroot" // "_b4.img"
let post50= "&postroot" // "_b5.img"
let post60= "&postroot" // "_b6.img"
let post70= "&postroot" // "_b7.img"
let post80= "&postroot" // "_b8.img"

! subdir contents

let nxpre1 = "&subdir" // "/nxpre1"
let nxpre2 = "&subdir" // "/nxpre2"
let nxpre3 = "&subdir" // "/nxpre3"
let nxpre4 = "&subdir" // "/nxpre4"
let nxpre5 = "&subdir" // "/nxpre5"
let nxpre6 = "&subdir" // "/nxpre6"
let nxpre7 = "&subdir" // "/nxpre7"
let nxpre8 = "&subdir" // "/nxpre8"
let nxpost1 = "&subdir" // "/nxpost1"
let nxpost2 = "&subdir" // "/nxpost2"
let nxpost3 = "&subdir" // "/nxpost3"
let nxpost4 = "&subdir" // "/nxpost4"
let nxpost5 = "&subdir" // "/nxpost5"
let nxpost6 = "&subdir" // "/nxpost6"
let nxpost7 = "&subdir" // "/nxpost7"
let nxpost8 = "&subdir" // "/nxpost8"
let nxpre3byte = "&subdir" // "/nxpre3byte"
let nxpost3byte = "&subdir" // "/nxpost3byte"
let nxred = "&subdir" // "/nxred"
let nxgrn = "&subdir" // "/nxgrn"
let nxblu = "&subdir" // "/nxblu"

let dif1 = "&subdir" // "/dif1"
let dif2 = "&subdir" // "/dif2"
let dif3 = "&subdir" // "/dif3"
let dif4 = "&subdir" // "/dif4"
let dif5 = "&subdir" // "/dif5"
let dif6 = "&subdir" // "/dif6"
let dif7 = "&subdir" // "/dif7"
let dif8 = "&subdir" // "/dif8"
let xxxim4 = "&subdir" // "/xxxim4"
let xxxim4a = "&subdir" // "/xxxim4a"
let xxxim4b = "&subdir" // "/xxxim4b"
let xxxim4c = "&subdir" // "/xxxim4c"
let xxxim4bb = "&subdir" // "/xxxim4bb"
let xxxim4cc = "&subdir" // "/xxxim4cc"
let xxxim4d = "&subdir" // "/xxxim4d"
let xxxim4e = "&subdir" // "/xxxim4e"
let xxxim4f = "&subdir" // "/xxxim4f"
let xxxim5 = "&subdir" // "/xxxim5"
let xxxim6 = "&subdir" // "/xxxim6"
let outibis = "&subdir" // "/&outtabroot" // ".asc"
let outimg = "&subdir" // "/&outtabroot" // ".img"


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!goto curr

cvdnorm (&pre10,&pre20,&pre30,&pre40,&pre50,&pre60,&pre70,&pre80 +
   &post10,&post20,&post30,&post40,&post50,&post60,&post70,&post80) +
   out=(&nxpre1,&nxpre2,&nxpre3,&nxpre4,+
   &nxpre5,&nxpre6,&nxpre7,&nxpre8 +
   &nxpost1,&nxpost2,&nxpost3,&nxpost4,+
   &nxpost5,&nxpost6,&nxpost7,&nxpost8) +
   sigma=(1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0, +
   1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0) +
   printls=(5863,4093) window=11 donut=5 

f2 (&nxpre1,&nxpost1) out=&dif1 fun="in2-in1+128"  format=byte
f2 (&nxpre2,&nxpost2) out=&dif2 fun="in2-in1+128"  format=byte
f2 (&nxpre3,&nxpost3) out=&dif3 fun="in2-in1+128"  format=byte
f2 (&nxpre4,&nxpost4) out=&dif4 fun="in2-in1+128"  format=byte
f2 (&nxpre5,&nxpost5) out=&dif5 fun="in2-in1+128"  format=byte
f2 (&nxpre6,&nxpost6) out=&dif6 fun="in2-in1+128"  format=byte
f2 (&nxpre7,&nxpost7) out=&dif7 fun="in2-in1+128"  format=byte
f2 (&nxpre8,&nxpost8) out=&dif8 fun="in2-in1+128"  format=byte

curr>

! blue tarp

f2 (&dif1,&dif2,&dif3,&dif4,&dif5,&dif6,&dif7,&dif8) out=&xxxim4a fun= +
 "(in1>133)*(in2>124)*(in3<112)*(in4<90)*(in5<111)*(in6<83)*(in7<134)*(in7>121)*(in8>137)"

! black panel, difs only in a range, may have to revisit absolutes in post image

f2 (&dif1,&dif2,&dif3,&dif4,&dif5,&dif6,&dif7,&dif8) out=&xxxim4b fun= +
 "(in1<123)*(in2<119)*(in3<102)*(in4<91)*(in5<103)*(in6<77)*(in7<98)*(in8<77)*2"

f2 (&dif1,&dif2,&dif3,&dif4,&dif5,&dif6,&dif7,&dif8) out=&xxxim4c fun= +
 "(in1>111)*(in2>107)*(in3>87)*(in4>77)*(in5>87)*(in6>50)*(in7>82)*(in8>57)*2"

f2 (&xxxim4b,&xxxim4c) out=&xxxim4d fun="(in1+in2>3)*2"

! white panel, difs and absolutes, difs too numerous

f2 (&dif1,&dif2,&dif3,&dif4,&dif5,&dif6,&dif7,&dif8) out=&xxxim4b fun= +
 "(in1>160)*(in2>150)*(in3>157)*(in4>159)*(in5>140)*(in6>152)*(in7>141)*(in8>157)*3"

f2 (&nxpost1,&nxpost2,&nxpost3,&nxpost4,&nxpost5,&nxpost6,&nxpost7,&nxpost8) +
 out=&xxxim4c fun= +
 "(in1>398)*(in2>389)*(in3>397)*(in4>399)*(in5>380)*(in6>391)*(in7>380)*(in8>399)*3"

f2 (&xxxim4b,&xxxim4c) out=&xxxim4e fun="(in1+in2>5)*3"



! newly graded road

f2 (&dif1,&dif2,&dif3,&dif4,&dif5,&dif6,&dif7,&dif8) out=&xxxim4b fun= +
 "(in1<134)*(in2<133)*(in3<137)*(in4<135)*(in5<136)*(in6<136)*(in7<140)*(in8<140)*4"

f2 (&dif1,&dif2,&dif3,&dif4,&dif5,&dif6,&dif7,&dif8) out=&xxxim4c fun= +
 "(in1>125)*(in2>124)*(in3>128)*(in4>125)*(in5>126)*(in6>126)*(in7>130)*(in8>130)*4"

f2 (&nxpost1,&nxpost2,&nxpost3,&nxpost4,&nxpost5,&nxpost6,&nxpost7,&nxpost8) +
 out=&xxxim4bb fun= +
 "(in1>352)*(in2>352)*(in3>358)*(in4>360)*(in5>358)*(in6>356)*(in7>354)*(in8>353)*4"

f2 (&nxpost1,&nxpost2,&nxpost3,&nxpost4,&nxpost5,&nxpost6,&nxpost7,&nxpost8) +
 out=&xxxim4cc fun= +
 "(in1<362)*(in2<362)*(in3<368)*(in4<370)*(in5<368)*(in6<366)*(in7<364)*(in8<363)*4"

f2 (&xxxim4b,&xxxim4c,&xxxim4bb,&xxxim4cc) out=&xxxim4f fun="(in1+in2+in3+in4>15)*4"





! put together

f2 (&xxxim4a,&xxxim4d,&xxxim4e,&xxxim4f) out=&xxxim4 fun="in1+in2+in3+in4"


cform &nxpre3 &nxpre3byte irange=(100,700) orange=(0,255) oform=byte
cform &nxpost3 &nxpost3byte irange=(100,700) orange=(0,255) oform=byte

!hist &xxxim4
!xvd (&xxxim4,&nxpre3byte,&nxpost3byte)

! connected component

cform &xxxim4 &xxxim5 oform=full

concomp &xxxim5 (&xxxim6, xxxim6work)

!xvd xxxim6

comptab inp=(&xxxim6, &xxxim5) out=xxxltab.ibis

getzval (&xxxim4, xxxltab.ibis) cols=(3,4,11) 'NOIN

rowop2 xxxltab.ibis outtab keycol=2 range=(&minsize,&maxsize) 'select

compject (&xxxim6, outtab) out=&outimg cols=(1,11)

pixmap (outtab, &outimg) mapcols=(9,10) pixcol=(3,4) 'pixtomap

ibis-l outtab cols=(1,9,10,11) 'noheader 'nocol +
   outfile=&outibis cfor="%7d %15.8f %14.8f %7.0f"

! color the objects in alternate byte images

f2 (&outimg,&nxpre3byte) out=&nxred fun=+
 "(in1<0.5)*0+(in1>0.5)*(in1<1.5)*0+(in1>1.5)*(in1<2.5)*0+(in1>2.5)*(in1<3.5)*255+(in1>3.5)*(in1<4.5)*255"
f2 (&outimg,&nxpost3byte) out=&nxgrn fun=+
 "(in1<0.5)*in2*0.5+(in1>0.5)*(in1<1.5)*0+(in1>1.5)*(in1<2.5)*0+(in1>2.5)*(in1<3.5)*255+(in1>3.5)*(in1<4.5)*0"
f2 (&outimg,&nxpost3byte) out=&nxblu fun=+
 "(in1<0.5)*in2*0.5+(in1>0.5)*(in1<1.5)*255+(in1>1.5)*(in1<2.5)*0+(in1>2.5)*(in1<3.5)*255+(in1>3.5)*(in1<4.5)*0"

xvd (&nxred,&nxgrn,&nxblu)

theend>
end-proc
