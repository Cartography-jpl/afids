procedure
! Jul 25, 2016- RJB
! TEST SCRIPT FOR FASTMOS
! tests BYTE and HALF images
!
! Vicar Programs:
!       gen list sargonb
!
! External Programs;
!   <none>
!           
! parameters:
!   <none>
!
! Requires no external test data: 
!
refgbl $echo
body
let _onfail="stop"
let $echo="yes"
!
!  THIS IS A TEST OF PROGRAM FASTMOS
!
!      first test with two small byte-data input images.
!
gen FASTA1 NL=5 NS=5 IVAL=0 
gen FASTA2 NL=5 NS=5 IVAL=200
list FASTA1
list FASTA2
!
fastmos INP=(FASTA1,FASTA2) OUT=FASTAO1 MMODE=AVERAGE
list FASTAO1
!    
fastmos INP=(FASTA1,FASTA2) OUT=FASTAO2 MMODE=MOD
list FASTAO2
!    
fastmos INP=(FASTA1,FASTA2) OUT=FASTAO3 MMODE=OVERLAY THRESH=3
list FASTAO3
!    
fastmos INP=(FASTA1,FASTA2) OUT=FASTAO4 MMODE=MAX     THRESH=202
list FASTAO4
!    
fastmos INP=(FASTA1,FASTA2) OUT=FASTAO5 MMODE=MIN     THRESH=2
list FASTAO5
!
fastmos INP=(FASTA1,FASTA2) OUT=FASTAO6 OFF1=(-1,0,4,3) OFF2=(2,1)
list FASTAO6
!
!    offset input images out of sight. should get a zero image with SIZE size.
!
fastmos INP=(FASTA1,FASTA2) OUT=FASTAO7 SIZE=(1,1,3,4) OFF1=(-10,1) OFF2=(10,1)
list FASTAO7 'ZEROES
!
!    make some bigger images from FASTA1 & FASTA2.
!
fastmos INP=(FASTA1,FASTA2) OUT=FASTAO8 SIZE=(1,1,10,10) OFF1=(1,6) OFF2=(6,1)
list FASTAO8
!
fastmos INP=(FASTA1,FASTA2) OUT=FASTAO9 SIZE=(1,1,10,10)               +
        OFF1=(1,6) OFF2=(6,1) 'EDGE NSEQ=1 NTHRESH=2 NIBBLE=1
list FASTAO9
!
fastmos INP=(FASTA1,FASTA2) OUT=FASTAO10 SIZE=(1,1,10,10) OFF1=(1,6)       +
    OFF2=(6,1) 'EDGE NSEQ=2 LTHRESH=3 LNIBBLE=1 RTHRESH=2 RNIBBLE=0 NINCR=2
list FASTAO10 'ZEROES
!
!    offset first image.  Because THRESH=0, should just get FASTA1 surrounded
!    on 3 sides with zeroes.
!
fastmos INP=(FASTA1,FASTA2) OUT=FASTAO11 MMODE=OVERLAY THRESH=0 OFF1=(2,1) +
   SIZE=(1 1 10 10) 
list FASTAO11 'zeroes
!
!                  try a simple copy.
!
fastmos FASTA2 FASTA3
list FASTA3
!
!      test with two small halfword-data input images.
!
gen FASTB1 NL=5 NS=5 IVAL=0    'HALF
gen FASTB2 NL=5 NS=5 IVAL=20000  'HALF
list FASTB1
list FASTB2
!
fastmos INP=(FASTB1,FASTB2) OUT=FASTBO1 MMODE=AVERAGE
list FASTBO1
!    
fastmos INP=(FASTB1,FASTB2) OUT=FASTBO2 MMODE=MOD 
list FASTBO2
!    
fastmos INP=(FASTB1,FASTB2) OUT=FASTBO3 MMODE=OVERLAY THRESH=3
list FASTBO3
!    
fastmos INP=(FASTB1,FASTB2) OUT=FASTBO4 MMODE=MAX     THRESH=20002
list FASTBO4
!    
fastmos INP=(FASTB1,FASTB2) OUT=FASTBO5 MMODE=MIN     THRESH=2
list FASTBO5
!
fastmos INP=(FASTB1,FASTB2) OUT=FASTBO6 OFF1=(-1,0,4,3) OFF2=(2,1)
list FASTBO6
!
!    offset input images out of sight. should get a zero image with SIZE size.
!
fastmos INP=(FASTB1,FASTB2) OUT=FASTBO7 SIZE=(1,1,3,4) OFF1=(-10,1) OFF2=(10,1)
list FASTBO7 'ZEROES
!
!    make some bigger images from FASTB1 & FASTB2.
!
fastmos INP=(FASTB1,FASTB2) OUT=FASTBO8 SIZE=(1,1,10,10) OFF1=(1,6) OFF2=(6,1)
list FASTBO8
!
fastmos INP=(FASTB1,FASTB2) OUT=FASTBO9 SIZE=(1,1,10,10)               +
        OFF1=(1,6) OFF2=(6,1) 'EDGE NSEQ=1 NTHRESH=2 NIBBLE=1
list FASTBO9
!
fastmos INP=(FASTB1,FASTB2) OUT=FASTBO10 SIZE=(1,1,10,10) OFF1=(1,6)       +
    OFF2=(6,1) 'EDGE NSEQ=2 LTHRESH=3 LNIBBLE=1 RTHRESH=2 RNIBBLE=0 NINCR=2
list FASTBO10 'ZEROES
!
!  test case of negative THRESH values.
!
gen FASTB3 NL=5 NS=5 IVAL= -10 'HALF
fastmos FASTB3 FASTBO11 SIZE=(1,1,6,6) THRESH=-9
list FASTBO11
!
fastmos FASTB3 FASTBO12 SIZE=(1,1,6,6) THRESH=-32768 'EDGE NSEQ=1 NIBBLE=1
list FASTBO12
!
!                  try a simple copy.
!
fastmos FASTB2 FASTB3
list FASTB3
!
!      test with three small byte-data input images.
!
gen FASTC NL=10 NS=10 IVAL=0 LINC=0 SINC=0
sargonb FASTC FASTC1 ADD 100 (3,1,3,10,9,10,9,1)
sargonb FASTC FASTC2 ADD 200 (2,1,2,10,8,10,8,1)
sargonb FASTC FASTC3 ADD 120 (4,3,4,10,8,10,8,3)
list FASTC1 'ZEROES
list FASTC2 'ZEROES
list FASTC3 'ZEROES
!
fastmos INP=(FASTC1,FASTC2,FASTC3) OUT=FASTCO1 MMODE=AVERAGE OFF2=(2,1)
list FASTCO1 'ZEROES
!
fastmos INP=(FASTC1,FASTC2,FASTC3) OUT=FASTCO2 'MOD OFF2=(2,1) +
        'EDGE NIBBLE=2 NSEQ=4
list FASTCO2 'ZEROES
!    
!    mosaic 10 files together. 
!
gen FASTD  NL=10 NS=10 'HALF IVAL=0
sargonb FASTD FASTD1 SUBTRACT 20000 (3,3,3,6,6,6,6,3)
list FASTD1
gen FASTD2 NL=10 NS=10 'HALF IVAL=200
gen FASTD3 NL=10 NS=10 'HALF IVAL=400
gen FASTD4 NL=10 NS=10 'HALF IVAL=600
gen FASTD5 NL=10 NS=10 'HALF IVAL=800
gen FASTD6 NL=10 NS=10 'HALF IVAL=1000
gen FASTD7 NL=10 NS=10 'HALF IVAL=1200
gen FASTD8 NL=10 NS=10 'HALF IVAL=1400
gen FASTD9 NL=10 NS=10 'HALF IVAL=1600
gen FASTDA NL=10 NS=10 'HALF IVAL=1800
fastmos INP=(FASTD1 FASTD2 FASTD3 FASTD4 FASTD5 FASTD6   +
             FASTD7 FASTD8 FASTD9 FASTDA)                +
        OUT=FASTDO SIZE=(1 1 50 16) MMODE=OVER 'PROGRESS  +
        OFF1=(2,1)            OFF2=(1,5)                 +
        OFF3=(12,1)           OFF4=(5,5,10 10)           +
        OFF5=(22,1)           OFF6=(25,5)                +
        OFF7=(32,1)           OFF8=(30,5)                +
        OFF9=(42,1)           OFF10=(40,5) 
list FASTDO
!
!  Testing 3D images (added 2003-08-14)
!
gen FASTA13D NL=5 NS=5 NB=5 IVAL=0 
gen FASTA23D NL=5 NS=5 NB=5 IVAL=200
list FASTA13D
list FASTA23D
!
fastmos INP=(FASTA13D,FASTA23D) OUT=FASTAO13D MMODE=AVERAGE
list FASTAO13D 'zero

let $echo="no"
end-proc
