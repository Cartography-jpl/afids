procedure help=*
parm key type=string
parm fnamein type=(string,99)
parm rawpre type=(string,99)
parm rawacs type=(string,99)
parm band type=int valid=1:10
parm nband type=int default=1
parm outimg type=(string,99)

local iband int
local ibandp1 int
local topband int

local rawkey type=(string,99)

local fname type=(string,99)
local rawfile type=(string,99)
local rawtxt type=(string,99)
local logimg type=(string,99)
local tempfile1 type=(string,99)
local tempfile2 type=(string,99)
local tempfile3 type=(string,99)
local tempfile4 type=(string,99)
local alignfile type=(string,99)
local imgbandout type=(string,99)

local gridname type=(string,99)
local gridfinal1 type=(string,99)
local gridfinal2 type=(string,99)
local gridfinal3 type=(string,99)
local gridinfo type=(string,99)

local rsl real
local rss real
local rnl real
local rns real
local csl real
local cnl real
local icsl int
local icnl int
local sl int
local ss int
local nl int
local ns int
local nl1 int
local ns1 int

local appzoom real
local ip1 int
local p1 real
local p2 real

local nlcopy int

local rslv real
local rssv real
local rnlv real
local rnsv real
local slv int
local ssv int
local nlv int
local nsv int

local t1l real
local t1s real
local t2l real
local t2s real
local t3l real
local t3s real
local t1e real
local t1n real
local t2e real
local t2n real
local t3e real
local t3n real

local rastypstr string
local interp type=(string,10)
local rastype type=(string,10)
local rms type=real
local file2 type=(string,99)

local stripnl int
local stripns int
local zicsl int
local zicnl int
local zsl int
local zss int
local znl int
local zns int
local zoom real
local pband int

refgbl $echo
body
let $echo="yes"

write "aliwarpad2 05/28/08"

! the proc was built with bands numbered 0 to 9; then found out that
! community wants 1-10, so subtract one here

let pband = band-1

plab2tcl inp=&fnamein property="COREG_META_DATA" val=interp +
    keyword=interp vtype=0
plab2tcl inp=&fnamein property="COREG_META_DATA" val=rastype +
    keyword=rastype vtype=0
if (interp="-999") let interp = "bilin"
if (rastype="-999") let rastype = "point"

if (rastype="area")
   let rastypstr = "1(RasterPixelIsArea)"
else
   let rastypstr = "2(RasterPixelIsPoint)"
end-if

plab2tcl inp=&fnamein property="COREG_META_DATA" val=fname +
    keyword=bobdate vtype=0
let gridname = fname
idgen prefix=bab outvar=logimg

let alignfile = "scratch/" // "xxx&key" // "alignfile"
ibis-gen &alignfile nc=4 nr=2 format=("FULL","FULL","FULL","FULL") +
   datacol=(1,2,3,4) data=(-999,-999,-999,-999,-999,-999,-999,-999)

! iterate over the bands

let iband = pband-1
let topband = pband+nband-1
loop
   let iband = iband+1
   let ibandp1 = iband+1
   if (iband>topband) goto loopdone

let rawkey = "raw" // "&key" // "/&fname" // "tempraw"
if (iband=0)
   alilog inpre=&rawpre acs="&rawacs" out=&rawkey sb=1 'pan
else
   alilog inpre=&rawpre acs="&rawacs" out=&rawkey sb=&iband nbnd=1
end-if

let rawfile = "&rawkey" // "_b&iband" // ".img"
let rawtxt = "&rawkey" // ".txt"

asc2tcl &rawtxt keyword="ARCH_LINES=" val=stripnl vtype=4
asc2tcl &rawtxt keyword="ARCH_SAMPLES=" val=stripns vtype=4
if (iband=0)
   align4p &rawkey &fname stripnl=&stripnl stripns=&stripns band=&iband
else
   align4 &rawkey &fname stripnl=&stripnl stripns=&stripns band=&iband +
      alignfile=&alignfile
end-if

! other filenames

let tempfile1 = "scratch/" // "xxx&key" // "temp1" // ".img"
let tempfile2 = "scratch/" // "xxx&key" // "temp2" // ".img"
let tempfile3 = "scratch/" // "xxx&key" // "temp3" // ".img"
let tempfile4 = "scratch/" // "xxx&key" // "temp4" // ".img"
let gridfinal1 = "final&key" // "/&fname"  // "gridfinal1"
let gridfinal2 = "final&key" // "/&fname"  // "gridfinal2"
let gridfinal3 = "final&key" // "/&fname"  // "gridfinal3"
let gridinfo = "final&key" // "/&fname"  // "gridinfo"

label-add inp=&rawfile items="bobdate=&logimg" +
         property="COREG_META_DATA"

! get the parameters from the gridinfo file

ibis2tcl &gridinfo v1=t1l v2=t1s v3=t1e v4=t1n +
    v5=t2l v6=t2s v7=t2e v8=t2n +
    v9=t3l v10=t3s +
    vartype=(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1) +
    ibisloc=(1,1,1,2,1,3,1,4, +
             2,1,2,2,2,3,2,4, +
             3,1,3,2)
ibis2tcl &gridinfo v1=rsl v2=rss v3=rnl v4=rns v5=t3e v6=t3n +
   vartype=(-1,-1,-1,-1,-1,-1) ibisloc=(1,7,1,8,1,9,1,10,3,3,3,4)
let sl = $fix(rsl)
let ss = $fix(rss)
let nl = $fix(rnl)
let ns = $fix(rns)
write "sl ss nl ns &sl &ss &nl &ns"
ibis2tcl &gridinfo v1=csl v2=cnl vartype=(0,0) ibisloc=(1,11,1,12)
let icsl = $fix(csl)
let icnl = $fix(cnl)

! the sl,ss,nl,ns for geom is different

ibis2tcl &gridfinal2 v1=rslv v2=rssv v3=rnlv v4=rnsv +
   vartype=(-1,-1,-1,-1) ibisloc=(1,1,1,2,1,3,1,4)
let slv = $fix(rslv)
let ssv = $fix(rssv)
let nlv = $fix(rnlv)
let nsv = $fix(rnsv)
write "slv ssv nlv nsv &slv &ssv &nlv &nsv"

! shortened processing extracted from hywarp.pdf

! for compression testing
compresschk &rawfile

label-list &rawfile
label-list &fnamein

plab2tcl &rawfile property=COREG_META_DATA val=ns1 +
   keyword=rawns vtype=4

let p1 = $float(ns1)
write "p1 &p1"
plab2tcl &fnamein property=COREG_META_DATA val=ns1 +
   keyword=rawns vtype=4
let p2 = $float(ns1)
write "p2 &p2"

! appzoom used because of nesting of 3:1 or 1:3
let appzoom = p2/p1
write "appzoom &appzoom"

!  ALI nests exactly

if (appzoom>0.6 and appzoom<1.6)
   let zoom = 1.0
   let zicsl = icsl
   let zicnl = icnl
   let zsl = sl
   let zss = ss
   let znl = nl
   let zns = ns

else-if (appzoom>2.0 and appzoom<4.0)
   let zoom = 3.0
   let zicsl = (icsl+2)/3
   let zicnl = icnl/3
   let zsl = (sl+2)/3
   let zss = (ss+2)/3
   let znl = nl/3
   let zns = ns/3

else-if (appzoom>0.2 and appzoom<0.5)
   let zoom = 0.333333333334
   let zicsl = icsl*3-2
   let zicnl = icnl*3
   let zsl = sl*3-2
   let zss = ss*3-2
   let znl = nl*3
   let zns = ns*3
end-if

! modify the mapping and geom on the input side for zoom value
! this achieves single resample for the zoom!=1.0 cases

copy &rawfile &tempfile1 sl=&zicsl nl=&zicnl

gtgen out=&tempfile2 'tiecnvrt +
   geotiff=("ModelTiePointTag=(&t1s,&t1l,0,&t1e,&t1n,0.0)", +
  "ModelTiePointTag=(&t2s,&t2l,0,&t2e,&t2n,0.0)", +
  "ModelTiePointTag=(&t3s,&t3l,0,&t3e,&t3n,0.0)", +
  "GTModelTypeGeoKey=2(ModelTypeGeographic)", +
  "GeogAngularUnitsGeoKey=9102(Angular_Degree)", +
  "GeographicTypeGeoKey=4326(GCS_WGS_84)", +
  "GTRasterTypeGeoKey=&rastypstr", +
  "GeogEllipsoidGeoKey=7030(Ellipse_WGS84)")
if (rastype="area")
   gtsize &tempfile2 &tempfile3 azoom=&zoom
else
   gtsize &tempfile2 &tempfile3 pzoom=&zoom
end-if

gtgen inp=(&tempfile1,&tempfile3) out=&tempfile2
gtcopy &tempfile2 &tempfile1 size=(&zsl,&zss,&znl,&zns)

ibis-copy &gridfinal1 &tempfile2
mf3 &tempfile2 f="c3=(c3-1)/(&zoom)+1$c4=(c4-1)/(&zoom)+1"

geomv inp=(&tempfile1,&tempfile2,&gridfinal3) +
      out=&tempfile3 size=(&slv,&ssv,&nlv,&nsv) +
      interp=&interp
let imgbandout = "&outimg" // "_&ibandp1"
gtsize (&tempfile3,&fnamein) &imgbandout 'coverref

plab2tcl &fnamein property=COREG_META_DATA val=rms +
   keyword=ACCURACY vtype=7
plab2tcl &fnamein property=COREG_META_DATA val=file2 +
   keyword=ACCREF vtype=0
label-add inp=&imgbandout items="accuracy=&rms" +
     property="COREG_META_DATA"
label-add inp=&imgbandout items="accuracy_unit=pixels" +
     property="COREG_META_DATA"
label-add inp=&imgbandout items="accref=&file2" +
     property="COREG_META_DATA"

end-loop
loopdone>

theend>
write "MSG: SPECTRAL BANDS PRESUMED TO BE REGISTERED"
write "MSG: PROCESSING COMPLETED"
end-proc
.TITLE
hywarp - warp one (or n) additional band(s) of hyperion
.HELP
PURPOSE
     
	   
CALL
  
  
OPERATION


PERFORMANCE

Restrictions
------------


Original Programmer: A. L. Zobrist, 29 Nov, 2001
Current Cognizant Programmer: A. L. Zobrist
Last change by: A. L. Zobrist, 20 Dec, 2001

.LEVEL1
.vari key
the key chosen for the 
initial runs
.vari fname
the root filename
.vari band
the band number, or start
band number if nband>1
.vari nband
the number of bands desired
.LEVEL2
.vari nband
how many bands to run, starting with the band given in band.
for example: band=27 nband=10 will run bands 27,28,29,30,31,
32,33,34,35,36.
.END
