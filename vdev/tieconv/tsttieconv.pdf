procedure
refgbl $echo
refgbl $autousage
parm version string def="ibis-1"
parm org string def="column"
body
!let _onfail="continue"
let $autousage="none"
let $echo="yes"


ibis-gen a version=&version org=&org  datacol=(1,2,3,4) +
    nc=4 nr=44
mf a func=("c1=sqrt(index*17+2763)","c2=sqrt(index*7+3431)")
mf a func=("c1=mod(c1,0.0001)*1000000","c2=mod(c2,0.0001)*1000000")
mf a func=("c3=c1*1.1+index/10","c4=c2*1.1+index/10")

tieconv INP=a COLS=(1,2,3,4)  OUT=b +
      NAH=7,NAV=7,MINL=1.,MINS=1.,MAXL=100.,MAXS=100. +
    'GEOMV  'print

! list the IBIS file
ibis-list b 'format

! testing the lgeom parameter output

tieconv INP=a COLS=(1,2,3,4)  OUT=b2 +
      NAH=7,NAV=7,MINL=1.,MINS=1.,MAXL=100.,MAXS=100. +
    'LGEOM    'print

! now test that the tiepoint data sets are OK in the geom programs

gen mgtest 10 10 SINC=40 LINC=40

geomv (mgtest,b) mgtest2 SIZE=(1,1,10,10)
list mgtest2

lgeom mgtest mgtest3 SIZE=(1,1,10,10) PARMS=b2
list mgtest3

difpic (mgtest2,mgtest3)

! now larger test case

ibis-gen a version=&version org=&org  datacol=(1,2,3,4) +
    nc=4 nr=3000
mf a func=("c1=sqrt(index*17+2763)","c2=sqrt(index*7+3431)")
mf a func=("c1=mod(c1,0.0001)*1000000","c2=mod(c2,0.0001)*1000000")
mf a func=("c3=c1*1.1+index/10","c4=c2*1.1+index/10")

tieconv INP=a COLS=(1,2,3,4)  OUT=b +
      NAH=30,NAV=5,MINL=1.,MINS=1.,MAXL=100.,MAXS=100. +
    'GEOMV    'print

! list the IBIS file
ibis-list b 'format


! list out a plot file just for definite look at triangles

ibis-gen a version=&version org=&org  datacol=(1,2,3,4) +
    nc=4 nr=11
mf a func=("c1=sqrt(index*17+2763)","c2=sqrt(index*7+3431)")
mf a func=("c1=mod(c1,0.0001)*1000000","c2=mod(c2,0.0001)*1000000")
mf a func=("c3=c1*1.1+index/10","c4=c2*1.1+index/10")

tieconv INP=a COLS=(1,2,3,4)  OUT=b +
      NAH=7,NAV=7,MINL=1.,MINS=1.,MAXL=100.,MAXS=100. +
    'GEOMV 'PLOT  'print

! list the IBIS file
ibis-list b 'format


! the polynomial cases, linear

ibis-gen a version=&version org=&org  datacol=(1,2,3,4) +
    nc=4 nr=3
mf3 a func="c1=@int(@rand*100)$c2=@int(@rand*100)" seed=1
mf3 a func="c3=c1+@rand$c4=c2+@rand" seed=2

tieconv INP=a COLS=(1,2,3,4)  OUT=b poly=linear 'geomv+
      NAH=7,NAV=7,MINL=1.,MINS=1.,MAXL=100.,MAXS=100.  'print

! list the IBIS file
ibis-list b 'format

! the polynomial cases, keystone

ibis-gen a version=&version org=&org  datacol=(1,2,3,4) +
    nc=4 nr=4
mf3 a func="c1=@int(@rand*100)$c2=@int(@rand*100)" seed=1
mf3 a func="c3=c1+@rand$c4=c2+@rand" seed=2

tieconv INP=a COLS=(1,2,3,4)  OUT=b poly=keystone 'geomv+
      NAH=7,NAV=7,MINL=1.,MINS=1.,MAXL=100.,MAXS=100.  'print

! list the IBIS file
ibis-list b 'format

! the polynomial cases, quadratic

ibis-gen a version=&version org=&org  datacol=(1,2,3,4) +
    nc=4 nr=6
mf3 a func="c1=@int(@rand*100)$c2=@int(@rand*100)" seed=1
mf3 a func="c3=c1+@rand$c4=c2+@rand" seed=2

tieconv INP=a COLS=(1,2,3,4)  OUT=b poly=quad 'geomv+
      NAH=7,NAV=7,MINL=1.,MINS=1.,MAXL=100.,MAXS=100.  'print

! list the IBIS file
ibis-list b 'format

! the polynomial cases, cubic

ibis-gen a version=&version org=&org  datacol=(1,2,3,4) +
    nc=4 nr=10
mf3 a func="c1=@int(@rand*100)$c2=@int(@rand*100)" seed=1
mf3 a func="c3=c1+@rand$c4=c2+@rand" seed=2

tieconv INP=a COLS=(1,2,3,4)  OUT=b poly=cubic 'geomv +
      NAH=7,NAV=7,MINL=1.,MINS=1.,MAXL=100.,MAXS=100.  'print

! list the IBIS file
ibis-list b 'format

! testing gridded input case, has to be triangulation case


ibis-gen a version=&version org=&org  datacol=(1,2,3,4) +
    nc=4 nr=12

mf3 a func=("c1=(@int((@index-1)/3)/2)*100+1$", +
          "c2=(@mod(@index+2,3)/2)*100+1")
mf3 a func="c3=c1+@rand$c4=c2+@rand" seed=2
ibis-list a 'format

tieconv INP=a COLS=(1,2,3,4)  OUT=b 'plot 'geomv +
      NAH=7,NAV=7,MINL=1.,MINS=1.,MAXL=100.,MAXS=100.  'print

! list the IBIS file
ibis-list b 'format

theend>
end-proc
